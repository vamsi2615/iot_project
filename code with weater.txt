#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ArduinoJson.h>

#define soilMoisturePin A0
#define waterLevelPin A1
#define pumpPin 8

const char* ssid = "your_SSID"; // Your Wi-Fi SSID
const char* password = "your_PASSWORD"; // Your Wi-Fi Password
const char* apiKey = "your_API_KEY"; // Your Weather API Key
const char* city = "your_CITY"; // City for weather data
const char* weatherApiUrl = "http://api.openweathermap.org/data/2.5/weather?q=";

void setup() {
  Serial.begin(9600);
  pinMode(pumpPin, OUTPUT);
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void loop() {
  int soilMoistureValue = analogRead(soilMoisturePin);
  int waterLevelValue = analogRead(waterLevelPin);

  Serial.print("Soil Moisture: ");
  Serial.println(soilMoistureValue);
  Serial.print("Water Level: ");
  Serial.println(waterLevelValue);

  // Fetch weather data and control pump based on conditions
  fetchWeatherData(soilMoistureValue, waterLevelValue);

  delay(2000); // wait 2 seconds
}

void fetchWeatherData(int soilMoistureValue, int waterLevelValue) {
  WiFiClient client;
  String url = String(weatherApiUrl) + city + "&appid=" + apiKey + "&units=metric"; // Adjust units as needed

  if (client.connect("api.openweathermap.org", 80)) {
    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: api.openweathermap.org\r\n" +
                 "Connection: close\r\n\r\n");
    
    String response = "";
    while (client.connected() || client.available()) {
      if (client.available()) {
        response += client.readStringUntil('\n');
      }
    }
    client.stop();

    // Parse JSON response
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, response);

    // Extract rain percentage and temperature
    float rainPercent = doc["rain"]["1h"] ? doc["rain"]["1h"] : 0; // Rain volume in the last hour
    float temperature = doc["main"]["temp"]; // Current temperature

    Serial.print("Rain Volume (last hour): ");
    Serial.println(rainPercent);
    Serial.print("Temperature: ");
    Serial.println(temperature);

    // Control pump based on conditions
    if (rainPercent > 0.8) { // If rain volume is more than 80%
      digitalWrite(pumpPin, LOW); // Stop pump
      Serial.println("Pump stopped due to rain.");
    } else if (temperature > 40) { // If temperature is more than 40 degrees
      digitalWrite(pumpPin, HIGH); // Turn ON pump
      Serial.println("Pump turned ON due to high temperature.");
    } else if (temperature < 20) { // If temperature is less than 20 degrees
      digitalWrite(pumpPin, LOW); // Stop pump
      Serial.println("Pump stopped due to low temperature.");
    } else if (soilMoistureValue < 400 && waterLevelValue > 300) {
      digitalWrite(pumpPin, HIGH); // Turn ON pump based on soil moisture and water level
      Serial.println("Pump turned ON due to soil moisture and water level.");
    } else {
      digitalWrite(pumpPin, LOW); // Turn OFF pump
      Serial.println("Pump turned OFF.");
    }
  } else {
    Serial.println("Connection failed");
  }
}